package graph.list;

class Main {
	public static void main(String args[]){
//		char ch[] = {'A','B','C','D','E','F','G'};
//		Graph graph = new Graph(ch);
//		graph.addEdge(0, 1, 2,true);
//		graph.addEdge(0, 3, 5,true);
//		graph.addEdge(0, 5, 4,true);
//		graph.addEdge(1, 2, 3,true);
//		graph.addEdge(2, 4, 2,true);
//		graph.addEdge(4, 6, 2,true);
//		graph.addEdge(6, 5, 2,true);
//		graph.addEdge(5, 3, 3,true);
//		graph.addEdge(3, 1, 6,true);
//		graph.addEdge(2, 3, 5,true);
//		graph.addEdge(6, 3, 1,true);
//		//graph.showAdjList();
//		//graph.dijkstra(0,4);
//		//graph.showLabels();
//		char ch2[]={'A','B','C','D','E','F','G','H'};
//		Graph g = new Graph(ch2);
//		g.addEdge(0, 3, 1, false);
//		g.addEdge(0, 4, 1, false);
//		g.addEdge(1, 3, 1, false);
//		g.addEdge(2, 4, 1, false);
//		g.addEdge(2, 7, 1, false);
//		g.addEdge(3, 5, 1, false);
//		g.addEdge(3, 6, 1, false);
//		g.addEdge(3, 7, 1, false);
//		g.addEdge(4, 1, 1, false);
//		//g.showAdjList();
//		//g.topologicalSort();
//		g.breadthFirstSearch(2);
//		char ch[] = {'A','B','C','D'};
//		Graph gr = new Graph(ch);
//		gr.addEdge(0, 2, -2, true);
//		gr.addEdge(2, 3, 2, true);
//		gr.addEdge(3, 1, -1, true);
//		gr.addEdge(1, 0, 4, true);
//		gr.addEdge(1, 2, 3, true);
//		gr.MST_PRIM();
		char ch[] = {'1','2','3','4'};
		Graph g = new Graph(ch);
		g.addEdge(0,2,-2,false);
		g.addEdge(2,3,2, false);	
		g.addEdge(3,1,-1, false);
		g.addEdge(1,0,4,false);
		g.addEdge(1,2,3,false);
		g.addEdge(2,1,2,false);
		g.FloydWarshall();
		//System.out.println(bell.BellmanFord(0, new Label[ch.length]));
//		char ch[] = {'a','b','c','d','e','f','g','h','i'};
//		Graph mintree = new Graph(ch);
//		mintree.addEdge(0, 1, 4, true);
//		mintree.addEdge(0, 7, 8, true);
//		mintree.addEdge(1, 7, 11, true);
//		mintree.addEdge(1, 2, 8, true);
//		mintree.addEdge(2, 3, 7, true);
//		mintree.addEdge(2, 5, 4, true);
//		mintree.addEdge(3, 4, 9, true);
//		mintree.addEdge(3, 5, 14, true);
//		mintree.addEdge(4, 5, 10, true);
//		mintree.addEdge(2, 8, 2, true);
//		mintree.addEdge(8, 7, 7, true);
//		mintree.addEdge(8, 6, 6, true);
//		mintree.addEdge(6, 5, 2, true);
//		mintree.addEdge(6, 7, 1, true);
//		//mintree.MST_PRIM();
//		mintree.BellmanFord(0);
	}
}
